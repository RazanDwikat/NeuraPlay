#include <Servo.h>
#include <Keypad.h>
#include <math.h>
#include <SoftwareSerial.h> 
#include <DFRobotDFPlayerMini.h>

// --- DFPlayer ---
#define SFX_RX 50
#define SFX_TX 51
SoftwareSerial DFSerial(SFX_RX, SFX_TX);
DFRobotDFPlayerMini myDFPlayer;
byte sfxVolume = 25;

// --- الكيباد الموحد ---
const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'B','A','D','C'},
  {'6','3','#','9'},
  {'5','2','0','8'},
  {'4','1','*','7'}
}; 
byte rowPins[ROWS] = {44, 45, 46, 47}; 
byte colPins[COLS] = {48, 49, 52, 53};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

// --- LEDs + Buttons للألعاب ---
#define LED1_PIN 37
#define BUTTON1_PIN 36
#define LED2_PIN 38
#define BUTTON2_PIN 39
#define LED3_PIN 41
#define BUTTON3_PIN 40
#define LED4_PIN 42
#define BUTTON4_PIN 43

#define NUM_BUTTONS 4
int ledPins[NUM_BUTTONS]   = {LED1_PIN, LED2_PIN, LED3_PIN, LED4_PIN};
int buttonPins[NUM_BUTTONS]= {BUTTON1_PIN, BUTTON2_PIN, BUTTON3_PIN, BUTTON4_PIN};

// --- الموتور X ---
#define STEP_PIN_X 4
#define DIR_PIN_X 14
#define ENA_PIN_X 2
#define LIMIT_SWITCH_X1 5

// --- الموتور Y ---
#define STEP_PIN_Y 9
#define DIR_PIN_Y1 8
#define DIR_PIN_Y2 11
#define LIMIT_SWITCH_Y1 22
#define LIMIT_SWITCH_Y2 23

#define STEP_PIN_EXTRA 20
#define DIR_PIN_EXTRA 19
#define EN_PIN_EXTRA 18


#define TRIG_PIN 25
#define ECHO_PIN 24

long readUltrasonicCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 20000); // timeout 20ms
  long distance = duration * 0.034 / 2; // cm
  return distance;
}

// --- السيرفو ---
Servo servo1;  
Servo servo2;  
Servo servo3;  

// --- RGB RELAY ---
const int R_PIN = 15;
const int G_PIN = 16;
const int B_PIN = 17;
const bool ACTIVE_LOW = true;
int RELAY_ON, RELAY_OFF;

// --- إعدادات ---
const unsigned int STEP_DELAY_US =350;
int currentMode = 0; // 0=menu, 4=Simon, 5=Random, 9=Robot
int currentX = 0;
int currentY = 0;

// --- Simon Says ---
int pattern[] = {0, 2, 3, 1};
int patternLength = sizeof(pattern) / sizeof(pattern[0]);

// --- متغيرات لعبة الروبوت ---
bool gameStarted = false;
int selectedLevel = 0;

// ----------------- DFPlayer + LEDs Setup -----------------
void setup() {
  Serial.begin(9600);

  // DFPlayer
  DFSerial.begin(9600);
  if (!myDFPlayer.begin(DFSerial)) {
    Serial.println("DFPlayer Mini not detected!");
    while (true);
  }
  myDFPlayer.volume(sfxVolume);

  // LEDs & Buttons
  for (int i = 0; i < NUM_BUTTONS; i++) {
    pinMode(ledPins[i], OUTPUT);
    pinMode(buttonPins[i], INPUT_PULLUP);
  }

  // محركات
  pinMode(STEP_PIN_X, OUTPUT);
  pinMode(DIR_PIN_X, OUTPUT);
  pinMode(ENA_PIN_X, OUTPUT);
  pinMode(LIMIT_SWITCH_X1, INPUT_PULLUP);
  digitalWrite(ENA_PIN_X, LOW);

  pinMode(STEP_PIN_Y, OUTPUT);
  pinMode(DIR_PIN_Y1, OUTPUT);
  pinMode(DIR_PIN_Y2, OUTPUT);
  pinMode(LIMIT_SWITCH_Y1, INPUT_PULLUP);
  pinMode(LIMIT_SWITCH_Y2, INPUT_PULLUP);

  // الموتور الإضافي
  pinMode(STEP_PIN_EXTRA, OUTPUT);
  pinMode(DIR_PIN_EXTRA, OUTPUT);
  pinMode(EN_PIN_EXTRA, OUTPUT);

  digitalWrite(EN_PIN_EXTRA, LOW);   // تفعيل الدرايفر
  digitalWrite(DIR_PIN_EXTRA, HIGH);  // اتجاه الدوران

  servo1.attach(30);
  servo2.attach(31);
  servo3.attach(35);

  servo1.write(60);
  servo2.write(60);
  servo3.write(0);
  RELAY_ON  = ACTIVE_LOW ? LOW  : HIGH;
  RELAY_OFF = ACTIVE_LOW ? HIGH : LOW;
  pinMode(R_PIN, OUTPUT);
  pinMode(G_PIN, OUTPUT);
  pinMode(B_PIN, OUTPUT);
  setColor(0,0,0);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  randomSeed(analogRead(0));
  Serial.println("✅ جاهز. اضغط B لقائمة ألعاب الأزرار أو D لقائمة الرسم.");
  myDFPlayer.play(20);
}


unsigned long lastCheck = 0;
const int CHECK_INTERVAL = 1000; // كل 100ms

void checkSafetyStop() {
  if (millis() - lastCheck < CHECK_INTERVAL) return; // ما تفحص إلا كل 100ms
  lastCheck = millis();

  long d = readUltrasonicCM();
  if (d > 0 && d < 10) {
    Serial.println("⛔ جسم قريب: إيقاف مؤقت!");
    while (true) {
      long d2 = readUltrasonicCM();
      if (d2 > 15) break;  // يظل واقف لحد ما يبعد أكتر من 15سم
      delay(50);           // فحص سريع بدون بطء
    }
  }
}


// ----------------- LOOP الرئيسي -----------------
void loop() {
  setColor(1,1,1);
  char key = customKeypad.getKey();
  if (key) {
    // Serial.print("Key: ");
    // Serial.println(key);

    if (key == 'B') {
      currentMode = 0;
      myDFPlayer.play(21);
      Serial.println("القائمة: 4=Simon, 5=Random");
    }
    else if (key == '4') { currentMode = 4; runSimonSays(); }
    else if (key == '5') { currentMode = 5; runRandomButton(); }

    else if (key == 'D') {
      currentMode = 9;
      startRobotGame();
      
    }
  }

  // فيدباك الروبوت
  if (Serial.available() > 0) {
    String feedback = Serial.readStringUntil('\n');
    feedback.trim();
    if (feedback == "EXCELLENT") {setColor(0,1,0); myDFPlayer.play(13); }
    else if (feedback == "GOOD") { setColor(0,0,1); myDFPlayer.play(14);  }
    else if (feedback == "RETRY") { setColor(1,0,1); myDFPlayer.play(15);  }
    else setColor(0,0,0);
  }
}

// ----------------- ألعاب Simon & Random -----------------
// ---------------- لعبة 4: Simon Says ----------------
void runSimonSays() {
  myDFPlayer.play(8); // صوت البداية
  delay(6500);

  while (currentMode == 4) { 
    char key = customKeypad.getKey();
    if (key == '5') { currentMode = 5; return; }
    else if (key == 'D') { currentMode = 9; return; }
    else if (key == 'B') { currentMode = 0; return; }
    playPattern();


   myDFPlayer.play(7);
   delay(1000);
    bool success = getUserInput();
    if (currentMode != 4) return; //
   

    myDFPlayer.play(7);
    delay(1000);

    

    
    

    if (success) {
      setColor(0,1,0);
      myDFPlayer.play(3); delay(3500);
      myDFPlayer.play(1); delay(3500);
      setColor(1,1,1);
    } else {
      setColor(1,0,1);
      myDFPlayer.play(6); delay(1500);
      myDFPlayer.play(2); delay(3000);
      setColor(1,1,1);
    }

    delay(3000);
  }
}

void playPattern() {
  for (int i = 0; i < patternLength; i++) {
    int ledIndex = pattern[i];
    digitalWrite(ledPins[ledIndex], HIGH);
    delay(700);
    digitalWrite(ledPins[ledIndex], LOW);
    delay(300);

    char key = customKeypad.getKey();
    if (key == '5') { currentMode = 5; return; }
    else if (key == 'D') { currentMode = 9; return; }
    else if (key == 'B') { currentMode = 0; return; }
  }
}

bool getUserInput() {
  for (int i = 0; i < patternLength; i++) {
    int expectedButton = buttonPins[pattern[i]];
    bool pressedCorrect = false;

    while (!pressedCorrect) {

      char key = customKeypad.getKey();
      if (key == '5') { currentMode = 5; return false; }
      else if (key == 'D') { currentMode = 9; return false; }
      else if (key == 'B') { currentMode = 0; return false; }
      for (int b = 0; b < NUM_BUTTONS; b++) {
        if (digitalRead(buttonPins[b]) == LOW) {
          Serial.print("Button pressed: B");
          Serial.println(b+1);

          if (buttonPins[b] == expectedButton) {
            pressedCorrect = true;
            myDFPlayer.play(4);
            while (digitalRead(buttonPins[b]) == LOW) delay(10);
            break;
          } else {
            return false;
          }
        }
      }
    }
  }
  return true;
}

// ---------------- لعبة 5: Random Button ----------------
void runRandomButton() {
  myDFPlayer.play(22);
  while (currentMode == 5) {
    char key = customKeypad.getKey();
    if (key == '4') { currentMode = 4; return; }
    else if (key == 'D') { currentMode = 9; return; }
    else if (key == 'B') { currentMode = 0; return; }

    int choice = random(NUM_BUTTONS);
    runButtonRound(ledPins[choice], buttonPins[choice], 5000);
    delay(1500);
  }
}

void runButtonRound(int ledPin, int buttonPin, unsigned long duration) {
  digitalWrite(ledPin, HIGH);

  unsigned long startTime = millis();
  bool pressedCorrect = false;
  bool pressedWrong = false;

  while (millis() - startTime < duration) {
    char key = customKeypad.getKey();
    if (key == '4') { currentMode = 4; return; }
    else if (key == 'D') { currentMode = 9; return; }
    else if (key == 'B') { currentMode = 0; return; }

    for (int b = 0; b < NUM_BUTTONS; b++) {
      if (digitalRead(buttonPins[b]) == LOW) {
        if (buttonPins[b] == buttonPin) {
          pressedCorrect = true;
          Serial.print("Button pressed: B");
          Serial.println(b+1);
        } else {
          pressedWrong = true;
          Serial.print("Wrong button pressed: B");
          Serial.println(b+1);
        }

        while (digitalRead(buttonPins[b]) == LOW) delay(10);
        goto checkResult;
      }
    }
  }

checkResult:
  digitalWrite(ledPin, LOW);

  if (pressedCorrect) {
    myDFPlayer.play(4);
    setColor(0,1,0);
  } else {
    myDFPlayer.play(6);
    if (pressedWrong) {
      Serial.println("❌ زر غلط! خسرت");
    } else {
      Serial.println("⌛ انتهى الوقت بدون كبسة! خسرت");
    }
  }

  delay(2000);
}

// ----------------- دوال الإضاءة -----------------
void setColor(bool r, bool g, bool b) {
  digitalWrite(R_PIN, r ? RELAY_ON : RELAY_OFF);
  digitalWrite(G_PIN, g ? RELAY_ON : RELAY_OFF);
  digitalWrite(B_PIN, b ? RELAY_ON : RELAY_OFF);
}

// ----------------- دوال الروبوت -----------------
// (نفس اللي عندك، ما غيرته)

// ... كل دوال الموتور والسيرفو والرسم نفسها ...
void moveStepsX(int steps, bool direction) {
  digitalWrite(DIR_PIN_X, direction);
  for (int i = 0; i < steps; i++) {
     checkSafetyStop(); 
    digitalWrite(STEP_PIN_X, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_X, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
}

void moveStepsY(int steps, bool dirY1, bool dirY2) {
  digitalWrite(DIR_PIN_Y1, dirY1);
  digitalWrite(DIR_PIN_Y2, dirY2);
  for (int i = 0; i < steps; i++) {
    checkSafetyStop(); 
    digitalWrite(STEP_PIN_Y, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_Y, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
}

// --- الهومينج ---
void homeX() {
  digitalWrite(DIR_PIN_X, LOW);
  while (digitalRead(LIMIT_SWITCH_X1) == HIGH) {
    digitalWrite(STEP_PIN_X, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_X, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
  currentX = 0;
}

void homeY() {
  digitalWrite(DIR_PIN_Y1, HIGH);
  digitalWrite(DIR_PIN_Y2, LOW);
  while (digitalRead(LIMIT_SWITCH_Y2) == HIGH) {
    digitalWrite(STEP_PIN_Y, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_Y, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
  currentY = 0;
}

void liftGripper(){ servo1.write(60); delay(300); }
void lowerGripperToGrab(){ servo1.write(8); delay(300); }
void openGripper(){ servo3.write(40); delay(300); }
void closeGripper(){ servo3.write(0); delay(300); }
void resetServosToStart(){ servo1.write(0); servo2.write(90); servo3.write(60); delay(500); }

void moveTo(int targetX, int targetY) {
  int stepsY = targetY - currentY;
  bool dirY1 = stepsY > 0 ? HIGH : LOW;
  bool dirY2 = stepsY > 0 ? LOW : HIGH;
  moveStepsY(abs(stepsY), dirY1, dirY2);

  int stepsX = targetX - currentX;
  bool dirX = stepsX > 0 ? HIGH : LOW;
  moveStepsX(abs(stepsX), dirX);

  currentX = targetX;
  currentY = targetY;
}

//--- رسم المربع ---
void drawSquare(int startX, int startY, int L,int M) {
  // liftGripper();       
  moveTo(startX, startY); 
  lowerGripperToGrab();   
  moveTo(startX, startY - M);  
  moveTo(startX + L, startY - M); 
  moveTo(startX + L, startY);     
  moveTo(startX, startY);         
  liftGripper(); 
}



// --- رسم خط مائل ---
void drawDiagonalLine(int startX, int startY, int endX, int endY, int steps) {
  lowerGripperToGrab();
  for (int i = 0; i <= steps; i++) {
    int targetX = startX + i * (endX - startX) / steps;
    int targetY = startY + i * (endY - startY) / steps;

    bool dirX = targetX > currentX ? HIGH : LOW;
    bool dirY1 = targetY > currentY ? LOW : HIGH;
    bool dirY2 = targetY > currentY ? HIGH : LOW;

    if (currentX != targetX) moveStepsX(1, dirX);
    if (currentY != targetY) moveStepsY(1, dirY1, dirY2);

    currentX = targetX;
    currentY = targetY;
  }
  // liftGripper();
}



// --- رسم مثلث متساوي الساقين ---
void drawIsoscelesTriangle(int X0, int Y0, int X1, int Y1, int steps) {
  liftGripper();
  moveTo(X0, Y0);          // البداية
  lowerGripperToGrab();

  // 1- ارسم القاعدة
  drawDiagonalLine(X0, Y0, X1, Y0, steps);
  delay(500);

  // 2- احسب نقطة الرأس (منتصف القاعدة, Y1)
  int midX = (X0 + X1) / 2;
  int topY = Y1;

  // 3- ارسم الضلع الأول من (X1,Y0) للرأس
  drawDiagonalLine(X1, Y0, midX, topY, steps);
  delay(500);

  // 4- ارسم الضلع الثاني من الرأس لـ (X0,Y0)
  drawDiagonalLine(midX, topY, X0, Y0, steps);
  delay(500);

  liftGripper();
}

// // --- رسم مثلث ---
 void drawTriangle(int X0, int Y0, int X1, int Y1, int steps) {
liftGripper();
moveTo(X0, Y0);
lowerGripperToGrab();

// --- رسم المثلث ---
// --- رسم المثلث ---
drawDiagonalLine(X0, Y0, X1, Y0, steps);
int midX = (X0 + X1) / 2;
drawDiagonalLine(X1, Y0, midX, Y1, steps);
drawDiagonalLine(midX, Y1, X0, Y0, steps);
 }


// --- رسم مثلث ---
void drawHouse(int X0, int Y0, int X1, int Y1, int steps) {
  
liftGripper();
moveTo(X0, Y0);
lowerGripperToGrab();

// --- رسم المثلث ---
// --- رسم المثلث ---
drawDiagonalLine(X0, Y0, X1, Y0, steps);
int midX = (X0 + X1) / 2;
drawDiagonalLine(X1, Y0, midX, Y1, steps);
drawDiagonalLine(midX, Y1, X0, Y0, steps);

// إجبار القلم يرجع لنقطة البداية

delay(1000);

 moveStepsY(600, HIGH,LOW);
 moveStepsX(2200, HIGH);
 moveStepsY(600, LOW,HIGH);
 moveStepsX(2200, LOW);

liftGripper();





}

// --- رسم دائرة ---
void drawCircle(int Cx, int Cy, int R, int steps) {
  liftGripper();
  moveTo(Cx + R, Cy);
  lowerGripperToGrab();

  for (int i = 1; i <= steps; i++) {
    float theta = 2.0 * PI * i / steps;
    int targetX = Cx + R * cos(theta);
    int targetY = Cy + R * sin(theta);

    bool dirX = targetX > currentX ? HIGH : LOW;
    bool dirY1 = targetY > currentY ? HIGH : LOW;
    bool dirY2 = targetY > currentY ? LOW : HIGH;

    if (currentX != targetX) moveStepsX(1, dirX);
    if (currentY != targetY) moveStepsY(1, dirY1, dirY2);

    currentX = targetX;
    currentY = targetY;
  }

  liftGripper();
}










// --- تسلسل التشغيل الرئيسي ---
void runRobotSequence(char shape) {
  resetServosToStart();
  setColor(1, 1, 1); 
  homeY();
  homeX();

  openGripper();
  servo1.write(70);
  moveStepsX(16000, HIGH);
  servo1.write(27);
  delay(2000);
  closeGripper();
  delay(1000);
  for (int angle = 32; angle <= 65; angle++) {
  servo1.write(angle);
  delay(20); // كل درجة تأخذ 20ms
}
  moveStepsX(9500, LOW);
  servo2.write(140);
  //servo1.write(120);

  if (shape == '1') drawSquare(currentX, currentY, 3000, 600);
  else if (shape == '3') drawTriangle(0, -700, 3000, -100, 2000);
  // else if (shape == '2') drawIsoscelesTriangle(0, 0, 3000, 1000, 2000);
  else if (shape == '2') drawHouse(0, -700, 3000, -100, 2000);
  else if (shape == '4') drawCircle(1000, 1000, 500, 500);

  homeY();
  homeX();
  
  
  servo1.write(70);
  servo2.write(90);
  moveStepsX(16000, HIGH);
  servo1.write(27);
  delay(2000);
  openGripper();
  delay(1000);
  for (int angle = 32; angle <= 65; angle++) {
  servo1.write(angle);
  delay(20); // كل درجة تأخذ 20ms
}

  homeY();
  homeX();
  
}

void startRobotGame() {
  
  gameStarted = true;
  selectedLevel = 0;
  myDFPlayer.play(16);
  Serial.println("✏️ قائمة الرسم: اختر المستوى: 7=الأول, 8=الثاني");

  while(currentMode==9){
    char key = customKeypad.getKey();
    if (key) {
      if (selectedLevel == 0) {
        if (key=='7'){selectedLevel=1;myDFPlayer.play(17);Serial.println("اختر الرسمة: 1=مربع, 2=مثلث");
        unsigned long startTime = millis();
  while (millis() - startTime < 17000) { 
    while (millis() - startTime < 30000) {  
    checkSafetyStop();   // ✅ وقف عند قرب جسم
    digitalWrite(STEP_PIN_EXTRA, HIGH);
    delayMicroseconds(200);
    digitalWrite(STEP_PIN_EXTRA, LOW);
    delayMicroseconds(200);
  } // 30 ثانية
    digitalWrite(STEP_PIN_EXTRA, HIGH);
    delayMicroseconds(200);
    digitalWrite(STEP_PIN_EXTRA, LOW);
    delayMicroseconds(200);
  }
  }
        else if (key=='8'){selectedLevel=2;myDFPlayer.play(18);Serial.println("اختر الرسمة: 3=خط مائل");}
      } else {
        if (key=='1' && selectedLevel==1) {
          runRobotSequence('1');
          Serial.println(key);
        }
        else if (key=='2' && selectedLevel==1){
          runRobotSequence('3');
          Serial.println(key);

        }
        else if (key=='3' && selectedLevel==2){
          runRobotSequence('2');
          Serial.println(key);


        } 
        gameStarted=false;selectedLevel=0;
        
        Serial.println("انتهى الرسم، اضغط D لبدء جديد");
        break;
      }
    }
  }
}
