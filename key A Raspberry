import cv2
import numpy as np
import time
import serial
from picamera2 import Picamera2

# --- Serial to Arduino ---
ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)
time.sleep(2)

# --- ????? ???????? ---
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)
picam2.preview_configuration.main.format = "RGB888"
picam2.configure("preview")
picam2.start()
time.sleep(2)

# --- ????? ????? HSV ---
color_ranges = {
    "red": [([0, 120, 70], [10, 255, 255]), ([170, 120, 70], [180, 255, 255])],
    "blue": ([100, 150, 50], [140, 255, 255]),
    "yellow": ([20, 100, 100], [30, 255, 255])
}

# --- ????? ROI ??????? ---
positions = {
    "pos1": (50, 350, 100, 100),
    "pos2": (200, 350, 100, 100),
    "pos3": (350, 350, 100, 100)
}

# --- ???? ??? ????? ?? ROI ---
def check_color(frame, roi, color_name):
    x, y, w, h = roi
    crop = frame[y:y+h, x:x+w]
    hsv = cv2.cvtColor(crop, cv2.COLOR_BGR2HSV)

    if color_name == "red":
        mask1 = cv2.inRange(hsv, np.array(color_ranges["red"][0][0]), np.array(color_ranges["red"][0][1]))
        mask2 = cv2.inRange(hsv, np.array(color_ranges["red"][1][0]), np.array(color_ranges["red"][1][1]))
        mask = cv2.bitwise_or(mask1, mask2)
    else:
        lower, upper = color_ranges[color_name]
        mask = cv2.inRange(hsv, np.array(lower), np.array(upper))

    count = cv2.countNonZero(mask)
    return count > 500  # ?? ?????

print("Press 'q' to quit.")

try:
    while True:
        frame = picam2.capture_array()

        # --- ????? ????? ?? ????????? ---
        if ser.in_waiting > 0:
            line = ser.readline().decode().strip()

            # ???: check_color:X
            if line.startswith("check_color:"):
                seq = int(line.split(":")[1])
                color_to_check = {1: "red", 2: "blue", 3: "yellow"}[seq]
                roi = { "red": positions["pos1"], "blue": positions["pos2"], "yellow": positions["pos3"] }[color_to_check]
                correct = check_color(frame, roi, color_to_check)
                ser.write(b"all_correct\n" if correct else b"error\n")
                x, y, w, h = roi
                color_rect = (0, 255, 0) if correct else (0, 0, 255)
                cv2.rectangle(frame, (x, y), (x+w, y+h), color_rect, 2)
                cv2.putText(frame, color_to_check, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color_rect, 2)

            # ???: request_cube_position
            elif line == "request_cube_position":
                detected_positions = []
                for key, roi in positions.items():
                    for color_name in ["red", "blue", "yellow"]:
                        if check_color(frame, roi, color_name):
                            detected_positions.append(f"{key}:{color_name}")
                            break  # ?? ??? ????? ????

                if detected_positions:
                    msg = ",".join(detected_positions) + "\n"
                    ser.write(msg.encode())
                    print("Detected cubes at:", detected_positions)
                else:
                    ser.write(b"none\n")
                    print("No cube detected!")

        # --- ??? ?????????? ??? ?????? ---
        for key, (x, y, w, h) in positions.items():
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        cv2.imshow("Color Detection", frame)

        # ?????? ??? ????? ??? q
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break

finally:
    picam2.close()
    cv2.destroyAllWindows()
    ser.close()

