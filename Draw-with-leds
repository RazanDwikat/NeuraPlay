#include <Servo.h>
#include <Keypad.h>
#include <math.h>  // لدوال cos و sin
#include <SoftwareSerial.h> 
#include <DFRobotDFPlayerMini.h> 
// --- DFPlayer --- 
#define SFX_RX 50
 #define SFX_TX 51
SoftwareSerial DFSerial(SFX_RX, SFX_TX);
DFRobotDFPlayerMini myDFPlayer;
byte sfxVolume = 25;

// --- الموتور X ---
#define STEP_PIN_X 4
#define DIR_PIN_X 14
#define ENA_PIN_X 2
#define LIMIT_SWITCH_X1 5

// --- الموتور Y ---
#define STEP_PIN_Y 9
#define DIR_PIN_Y1 8
#define DIR_PIN_Y2 11
#define LIMIT_SWITCH_Y1 22
#define LIMIT_SWITCH_Y2 23

// --- السيرفو ---
Servo servo1;  // المفصل الأول
Servo servo2;  // الكوع
Servo servo3;  // الجريبر

// --- إعدادات الحركة ---
const unsigned int STEP_DELAY_US = 500;

// --- إعدادات الكيباد ---
const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'B','A','3','A'},
  {'6','3','6','B'},
  {'5','2','9','C'},
  {'4','1','#','D'}
};
byte rowPins[ROWS] = {44, 45, 46, 47}; 
byte colPins[COLS] = {48, 49, 7, 6};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

// --- RGB RELAY ---
const int R_PIN = 15;   // أحمر
const int G_PIN = 16;   // أخضر
const int B_PIN = 17;   // أزرق
const bool ACTIVE_LOW = true;
int RELAY_ON, RELAY_OFF;

// --- تتبع موقع الذراع ---
int currentX = 0;
int currentY = 0;


// ----------------- دوال الإضاءة -----------------
void setColor(bool r, bool g, bool b) {
  digitalWrite(R_PIN, r ? RELAY_ON : RELAY_OFF);
  digitalWrite(G_PIN, g ? RELAY_ON : RELAY_OFF);
  digitalWrite(B_PIN, b ? RELAY_ON : RELAY_OFF);
}

// --- دوال الحركة ---
void moveStepsX(int steps, bool direction) {
  digitalWrite(DIR_PIN_X, direction);
  for (int i = 0; i < steps; i++) {
    digitalWrite(STEP_PIN_X, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_X, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
}

void moveStepsY(int steps, bool dirY1, bool dirY2) {
  digitalWrite(DIR_PIN_Y1, dirY1);
  digitalWrite(DIR_PIN_Y2, dirY2);
  for (int i = 0; i < steps; i++) {
    digitalWrite(STEP_PIN_Y, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_Y, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
}

// --- الهومينج ---
void homeX() {
  digitalWrite(DIR_PIN_X, LOW);
  while (digitalRead(LIMIT_SWITCH_X1) == HIGH) {
    digitalWrite(STEP_PIN_X, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_X, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
  currentX = 0;
}

void homeY() {
  digitalWrite(DIR_PIN_Y1, HIGH);
  digitalWrite(DIR_PIN_Y2, LOW);
  while (digitalRead(LIMIT_SWITCH_Y2) == HIGH) {
    digitalWrite(STEP_PIN_Y, HIGH);
    delayMicroseconds(STEP_DELAY_US);
    digitalWrite(STEP_PIN_Y, LOW);
    delayMicroseconds(STEP_DELAY_US);
  }
  currentY = 0;
}

// --- الجريبر والسيرفو ---
void liftGripper() { servo1.write(60); delay(300); }
void lowerGripperToGrab() { servo1.write(20); delay(300); }
void openGripper() { servo3.write(60); delay(300); }
void closeGripper() { servo3.write(2); delay(300); }
void resetServosToStart() { servo1.write(0); servo2.write(90); servo3.write(60); delay(500); }

// --- دالة للتحريك لأي نقطة ---
void moveTo(int targetX, int targetY) {
  int stepsY = targetY - currentY;
  bool dirY1 = stepsY > 0 ? HIGH : LOW;
  bool dirY2 = stepsY > 0 ? LOW : HIGH;
  moveStepsY(abs(stepsY), dirY1, dirY2);

  int stepsX = targetX - currentX;
  bool dirX = stepsX > 0 ? HIGH : LOW;
  moveStepsX(abs(stepsX), dirX);

  currentX = targetX;
  currentY = targetY;
}

// --- رسم المربع ---
void drawSquare(int startX, int startY, int L,int M) {
  liftGripper();       
  moveTo(startX, startY); 
  lowerGripperToGrab();   
  moveTo(startX, startY - M);     
  moveTo(startX + L, startY - M); 
  moveTo(startX + L, startY);     
  moveTo(startX, startY);         
  liftGripper(); 
}

// --- رسم خط مائل ---
void drawDiagonalLine(int startX, int startY, int endX, int endY, int steps) {
  lowerGripperToGrab();
  for (int i = 0; i <= steps; i++) {
    int targetX = startX + i * (endX - startX) / steps;
    int targetY = startY + i * (endY - startY) / steps;

    bool dirX = targetX > currentX ? HIGH : LOW;
    bool dirY1 = targetY > currentY ? LOW : HIGH;
    bool dirY2 = targetY > currentY ? HIGH : LOW;

    if (currentX != targetX) moveStepsX(1, dirX);
    if (currentY != targetY) moveStepsY(1, dirY1, dirY2);

    currentX = targetX;
    currentY = targetY;
  }
  liftGripper();
}

// --- رسم مثلث ---
void drawTriangle(int X0, int Y0, int X1, int Y1, int steps) {
  liftGripper();
  moveTo(X0, Y0);
  lowerGripperToGrab();
  drawDiagonalLine(X0, Y0, X1, Y0, steps);
  drawDiagonalLine(X1, Y0, X0, Y1, steps);
  drawDiagonalLine(X0, Y1, X0, Y0, steps);
  liftGripper();
}

// --- رسم دائرة ---
void drawCircle(int Cx, int Cy, int R, int steps) {
  liftGripper();
  moveTo(Cx + R, Cy);
  lowerGripperToGrab();

  for (int i = 1; i <= steps; i++) {
    float theta = 2.0 * PI * i / steps;
    int targetX = Cx + R * cos(theta);
    int targetY = Cy + R * sin(theta);

    bool dirX = targetX > currentX ? HIGH : LOW;
    bool dirY1 = targetY > currentY ? HIGH : LOW;
    bool dirY2 = targetY > currentY ? LOW : HIGH;

    if (currentX != targetX) moveStepsX(1, dirX);
    if (currentY != targetY) moveStepsY(1, dirY1, dirY2);

    currentX = targetX;
    currentY = targetY;
  }

  liftGripper();
}

// --- تسلسل التشغيل الرئيسي ---
void runRobotSequence(char shape) {
  resetServosToStart();
  setColor(0, 1, 1); 
  homeY();
  homeX();

  openGripper();
  moveStepsX(16000, HIGH);
  servo1.write(40);
  delay(1000);
  servo1.write(55);
  moveStepsX(9500, LOW);
  servo2.write(140);
  servo1.write(20);

  if (shape == '1') drawSquare(currentX, currentY, 3000, 700);
  else if (shape == '2') drawDiagonalLine(0, 0, 2000, 1000, 2000);
  else if (shape == '3') drawTriangle(0, 0, 2000, 1000, 2000);
  else if (shape == '4') drawCircle(1000, 1000, 500, 500);
}

// --- الإعدادات الأساسية ---
void setup() {
  Serial.begin(9600);

// DFPlayer setup
  DFSerial.begin(9600);
  if (!myDFPlayer.begin(DFSerial)) {
     Serial.println("DFPlayer Mini not detected!");
      while (true);
  }
  myDFPlayer.volume(sfxVolume);
   myDFPlayer.play(9);
  pinMode(STEP_PIN_X, OUTPUT);
  pinMode(DIR_PIN_X, OUTPUT);
  pinMode(ENA_PIN_X, OUTPUT);
  pinMode(LIMIT_SWITCH_X1, INPUT_PULLUP);
  digitalWrite(ENA_PIN_X, LOW);

  pinMode(STEP_PIN_Y, OUTPUT);
  pinMode(DIR_PIN_Y1, OUTPUT);
  pinMode(DIR_PIN_Y2, OUTPUT);
  pinMode(LIMIT_SWITCH_Y1, INPUT_PULLUP);
  pinMode(LIMIT_SWITCH_Y2, INPUT_PULLUP);

  servo1.attach(30);
  servo2.attach(31);
  servo3.attach(35);

  // إعداد RGB relay
  RELAY_ON  = ACTIVE_LOW ? LOW  : HIGH;
  RELAY_OFF = ACTIVE_LOW ? HIGH : LOW;
  pinMode(R_PIN, OUTPUT);
  pinMode(G_PIN, OUTPUT);
  pinMode(B_PIN, OUTPUT);
  setColor(0, 0, 0); // إطفاء

  resetServosToStart();

  Serial.println("Arduino جاهز. اضغط '1'=مربع, '2'=خط مائل, '3'=مثلث, '4'=دائرة.");
}

void loop() {
  char key = customKeypad.getKey();
  if (key) {
    Serial.print("Pressed key: ");
    Serial.println(key);  // للعرض على المراقبة

    if (key >= '1' && key <= '4') {
      Serial.println(key);
      switch(key) {
        case '1': myDFPlayer.play(11); break; // مربع
        case '2': myDFPlayer.play(12); break; // خط مائل
        case '3': myDFPlayer.play(12); break; // مثلث
        case '4': myDFPlayer.play(10); break; // دائرة
    }  // إرسال الرقم كـ نص مع نهاية سطر
      runRobotSequence(key);
    }
  }

  // ----------------- فيدباك + إضاءة -----------------
  if (Serial.available() > 0) {
    String feedback = Serial.readStringUntil('\n');
    feedback.trim();

    if (feedback == "EXCELLENT") {
      myDFPlayer.play(13); 
      setColor(0, 1, 0); // أخضر
    } else if (feedback == "GOOD") {
      myDFPlayer.play(14); 
      setColor(0, 0, 1); // أزرق
    } else if (feedback == "RETRY") {
      myDFPlayer.play(15); 
      setColor(1, 0, 1); // أحمر
    } else {
      setColor(0, 0, 0); // إطفاء
    }
  }
}

